"""
    Deutscher Bundestag - DIP

    API des Dokumentations- und Informationssystems für Parlamentsmaterialien  # noqa: E501

    The version of the OpenAPI document: 1.2
    Contact: parlamentsdokumentation@bundestag.de
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from deutschland.dip_bundestag.api_client import ApiClient
from deutschland.dip_bundestag.api_client import Endpoint as _Endpoint
from deutschland.dip_bundestag.model.aktivitaet import Aktivitaet
from deutschland.dip_bundestag.model.aktivitaet_list_response import (
    AktivitaetListResponse,
)
from deutschland.dip_bundestag.model.get_vorgang404_response import (
    GetVorgang404Response,
)
from deutschland.dip_bundestag.model.get_vorgang_list400_response import (
    GetVorgangList400Response,
)
from deutschland.dip_bundestag.model.get_vorgang_list401_response import (
    GetVorgangList401Response,
)
from deutschland.dip_bundestag.model.zuordnung import Zuordnung
from deutschland.dip_bundestag.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class AktivittenApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_aktivitaet_endpoint = _Endpoint(
            settings={
                "response_type": (Aktivitaet,),
                "auth": ["ApiKeyHeader", "ApiKeyQuery"],
                "endpoint_path": "/aktivitaet/{id}",
                "operation_id": "get_aktivitaet",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "format",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [
                    "format",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("format",): {"JSON": "json", "XML": "xml"},
                },
                "openapi_types": {
                    "id": (int,),
                    "format": (str,),
                },
                "attribute_map": {
                    "id": "id",
                    "format": "format",
                },
                "location_map": {
                    "id": "path",
                    "format": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/xml"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_aktivitaet_list_endpoint = _Endpoint(
            settings={
                "response_type": (AktivitaetListResponse,),
                "auth": ["ApiKeyHeader", "ApiKeyQuery"],
                "endpoint_path": "/aktivitaet",
                "operation_id": "get_aktivitaet_list",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "f_aktualisiert_start",
                    "f_aktualisiert_end",
                    "f_datum_start",
                    "f_datum_end",
                    "f_wahlperiode",
                    "f_drucksache",
                    "f_id",
                    "f_plenarprotokoll",
                    "f_dokumentart",
                    "f_dokumentnummer",
                    "f_drucksachetyp",
                    "f_frage_nummer",
                    "f_zuordnung",
                    "format",
                    "cursor",
                ],
                "required": [],
                "nullable": [],
                "enum": [
                    "f_dokumentart",
                    "format",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("f_dokumentart",): {
                        "DRUCKSACHE": "Drucksache",
                        "PLENARPROTOKOLL": "Plenarprotokoll",
                    },
                    ("format",): {"JSON": "json", "XML": "xml"},
                },
                "openapi_types": {
                    "f_aktualisiert_start": (datetime,),
                    "f_aktualisiert_end": (datetime,),
                    "f_datum_start": (date,),
                    "f_datum_end": (date,),
                    "f_wahlperiode": (int,),
                    "f_drucksache": (int,),
                    "f_id": (int,),
                    "f_plenarprotokoll": (int,),
                    "f_dokumentart": (str,),
                    "f_dokumentnummer": (str,),
                    "f_drucksachetyp": (str,),
                    "f_frage_nummer": (str,),
                    "f_zuordnung": (Zuordnung,),
                    "format": (str,),
                    "cursor": (str,),
                },
                "attribute_map": {
                    "f_aktualisiert_start": "f.aktualisiert.start",
                    "f_aktualisiert_end": "f.aktualisiert.end",
                    "f_datum_start": "f.datum.start",
                    "f_datum_end": "f.datum.end",
                    "f_wahlperiode": "f.wahlperiode",
                    "f_drucksache": "f.drucksache",
                    "f_id": "f.id",
                    "f_plenarprotokoll": "f.plenarprotokoll",
                    "f_dokumentart": "f.dokumentart",
                    "f_dokumentnummer": "f.dokumentnummer",
                    "f_drucksachetyp": "f.drucksachetyp",
                    "f_frage_nummer": "f.frage_nummer",
                    "f_zuordnung": "f.zuordnung",
                    "format": "format",
                    "cursor": "cursor",
                },
                "location_map": {
                    "f_aktualisiert_start": "query",
                    "f_aktualisiert_end": "query",
                    "f_datum_start": "query",
                    "f_datum_end": "query",
                    "f_wahlperiode": "query",
                    "f_drucksache": "query",
                    "f_id": "query",
                    "f_plenarprotokoll": "query",
                    "f_dokumentart": "query",
                    "f_dokumentnummer": "query",
                    "f_drucksachetyp": "query",
                    "f_frage_nummer": "query",
                    "f_zuordnung": "query",
                    "format": "query",
                    "cursor": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/xml"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def get_aktivitaet(self, id, **kwargs):
        """Liefert Metadaten zu einer Aktivität  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_aktivitaet(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int):

        Keyword Args:
            format (str): Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML.. [optional] if omitted the server will use the default value of "json"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Aktivitaet
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.get_aktivitaet_endpoint.call_with_http_info(**kwargs)

    def get_aktivitaet_list(self, **kwargs):
        """Liefert eine Liste von Metadaten zu Aktivitäten  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_aktivitaet_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            f_aktualisiert_start (datetime): Frühestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum. . [optional]
            f_aktualisiert_end (datetime): Spätestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum. . [optional]
            f_datum_start (date): Frühestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen. . [optional]
            f_datum_end (date): Spätestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen. . [optional]
            f_wahlperiode (int): Nummer der Wahlperiode  Selektiert alle Entitäten, die der angegebenen Wahlperiode zugeordnet sind. Kann wiederholt werden, um mehrere Wahlperioden zu selektieren. . [optional]
            f_drucksache (int): ID einer verknüpften Drucksache  Selektiert alle Entitäten, die mit der angegebenen Drucksache verknüpft sind. . [optional]
            f_id (int): ID der Entität  Kann wiederholt werden, um mehrere Entitäten zu selektieren. . [optional]
            f_plenarprotokoll (int): ID eines verknüpften Plenarprotokolls  Selektiert alle Entitäten, die mit dem angegebenen Plenarprotokoll verknüpft sind. . [optional]
            f_dokumentart (str): Drucksache oder Plenarprotokoll  Selektiert alle Entitäten, die mit der angegebenen Dokumentart verknüpft sind. . [optional]
            f_dokumentnummer (str): Dokumentnummer einer Drucksache oder eines Plenarprotokolls  Selektiert alle Entitäten, die mit der angegebenen Dokumentnummer verknüpft sind. Kann wiederholt werden, um mehrere Dokumentnummern zu selektieren. . [optional]
            f_drucksachetyp (str): Typ der Drucksache  Selektiert alle Entitäten, die mit dem angegebenen Drucksachetyp verknüpft sind. . [optional]
            f_frage_nummer (str): Fragenummer/Listenziffer  Selektiert alle Entitäten, die mit der angegebenen Fragenummer in einer Drucksache verknüpft sind. Kann wiederholt werden, um mehrere Fragenummern zu selektieren. . [optional]
            f_zuordnung (Zuordnung): Zuordnung der Entität zum Bundestag, Bundesrat, Bundesversammlung oder Europakammer. [optional]
            format (str): Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML.. [optional] if omitted the server will use the default value of "json"
            cursor (str): Position des Cursors zur Anfrage weiterer Entitäten  Übersteigt die Anzahl der gefundenen Entitäten das jeweilige Limit, muss eine Folgeanfrage gestellt werden, um weitere Entitäten zu laden. Eine Folgeanfrage wird gebildet, indem alle Parameter der ursprünglichen Anfrage wiederholt werden und zusätzlich der cursor Parameter der letzten Antwort eingesetzt wird. Es können solange Folgeanfragen gestellt werden, bis sich der cursor nicht mehr ändert. Dies signalisiert, dass alle Entitäten geladen wurden. . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AktivitaetListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.get_aktivitaet_list_endpoint.call_with_http_info(**kwargs)
