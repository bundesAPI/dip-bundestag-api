"""
    DIP Bundestag API

    Bundestag: Dokumentations- und Informationssystem f√ºr Parlamentsmaterialien  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: kontakt@bund.dev
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from deutschland.dip_bundestag.api_client import ApiClient
from deutschland.dip_bundestag.api_client import Endpoint as _Endpoint
from deutschland.dip_bundestag.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class DrucksacheApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.drucksache_endpoint = _Endpoint(
            settings={
                "response_type": (
                    {
                        str: (
                            bool,
                            date,
                            datetime,
                            dict,
                            float,
                            int,
                            list,
                            str,
                            none_type,
                        )
                    },
                ),
                "auth": ["ApiKeyAuth"],
                "endpoint_path": "/drucksache",
                "operation_id": "drucksache",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "format",
                    "cursor",
                    "f_id",
                    "f_datum_start",
                    "f_datum_end",
                    "f_zuordnung",
                ],
                "required": [],
                "nullable": [],
                "enum": [
                    "format",
                    "f_zuordnung",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("format",): {"JSON": "json", "XML": "xml"},
                    ("f_zuordnung",): {"BT": "BT", "BR": "BR", "BV": "BV", "EK": "EK"},
                },
                "openapi_types": {
                    "format": (str,),
                    "cursor": (str,),
                    "f_id": (int,),
                    "f_datum_start": (str,),
                    "f_datum_end": (str,),
                    "f_zuordnung": (str,),
                },
                "attribute_map": {
                    "format": "format",
                    "cursor": "cursor",
                    "f_id": "f.id",
                    "f_datum_start": "f.datum.start",
                    "f_datum_end": "f.datum.end",
                    "f_zuordnung": "f.zuordnung",
                },
                "location_map": {
                    "format": "query",
                    "cursor": "query",
                    "f_id": "query",
                    "f_datum_start": "query",
                    "f_datum_end": "query",
                    "f_zuordnung": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.drucksache_id_endpoint = _Endpoint(
            settings={
                "response_type": (
                    {
                        str: (
                            bool,
                            date,
                            datetime,
                            dict,
                            float,
                            int,
                            list,
                            str,
                            none_type,
                        )
                    },
                ),
                "auth": ["ApiKeyAuth"],
                "endpoint_path": "/drucksache/{id}",
                "operation_id": "drucksache_id",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "format",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [
                    "format",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("format",): {"JSON": "json", "XML": "xml"},
                },
                "openapi_types": {
                    "id": (int,),
                    "format": (str,),
                },
                "attribute_map": {
                    "id": "id",
                    "format": "format",
                },
                "location_map": {
                    "id": "path",
                    "format": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.drucksache_text_endpoint = _Endpoint(
            settings={
                "response_type": (
                    {
                        str: (
                            bool,
                            date,
                            datetime,
                            dict,
                            float,
                            int,
                            list,
                            str,
                            none_type,
                        )
                    },
                ),
                "auth": ["ApiKeyAuth"],
                "endpoint_path": "/drucksache-text",
                "operation_id": "drucksache_text",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "format",
                    "cursor",
                    "f_id",
                    "f_datum_start",
                    "f_datum_end",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "format": (str,),
                    "cursor": (str,),
                    "f_id": (int,),
                    "f_datum_start": (str,),
                    "f_datum_end": (str,),
                },
                "attribute_map": {
                    "format": "format",
                    "cursor": "cursor",
                    "f_id": "f.id",
                    "f_datum_start": "f.datum.start",
                    "f_datum_end": "f.datum.end",
                },
                "location_map": {
                    "format": "query",
                    "cursor": "query",
                    "f_id": "query",
                    "f_datum_start": "query",
                    "f_datum_end": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.drucksache_text_id_endpoint = _Endpoint(
            settings={
                "response_type": (
                    {
                        str: (
                            bool,
                            date,
                            datetime,
                            dict,
                            float,
                            int,
                            list,
                            str,
                            none_type,
                        )
                    },
                ),
                "auth": ["ApiKeyAuth"],
                "endpoint_path": "/drucksache-text/{id}",
                "operation_id": "drucksache_text_id",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "format",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [
                    "format",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("format",): {"JSON": "json", "XML": "xml"},
                },
                "openapi_types": {
                    "id": (int,),
                    "format": (str,),
                },
                "attribute_map": {
                    "id": "id",
                    "format": "format",
                },
                "location_map": {
                    "id": "path",
                    "format": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def drucksache(self, **kwargs):
        """Liste aller Drucksachen  # noqa: E501

        Liste aller Drucksachen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.drucksache(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            format (str): Format. [optional]
            cursor (str): Position des Cursors zur Anfrage weiterer Entit√§ten (s. Folgeanfragen nach weiteren Entit√§ten).. [optional]
            f_id (int): ID der Entit√§t. Kann wiederholt werden, um mehrere Entit√§ten zu selektieren (z.B. f.id=84393&f.id=84394).. [optional]
            f_datum_start (str): Fr√ºhestes Datum der Entit√§t im Format JJJJ-MM-TT. Selektiert Entit√§ten in einem Datumsbereich basierend auf dem Dokumentdatum. F√ºr Vorg√§nge und Personen wird der Datumsbereich aller zugeh√∂rigen Dokumente herangezogen.. [optional]
            f_datum_end (str): Sp√§testes Datum der Entit√§t im Format JJJJ-MM-TT. Selektiert Entit√§ten in einem Datumsbereich basierend auf dem Dokumentdatum. F√ºr Vorg√§nge und Personen wird der Datumsbereich aller zugeh√∂rigen Dokumente herangezogen.. [optional]
            f_zuordnung (str): Zuordnung der Entit√§t zum Bundestag (BT), Bundesrat (BR), Bundesversammlung (BV) oder Europakammer (EK). Nur f√ºr die Ressourcentypen: aktivitaet, drucksache.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.drucksache_endpoint.call_with_http_info(**kwargs)

    def drucksache_id(self, id, **kwargs):
        """Metadaten zu Drucksache  # noqa: E501

        Metadaten zu Drucksache  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.drucksache_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): ID der Drucksache

        Keyword Args:
            format (str): Format. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.drucksache_id_endpoint.call_with_http_info(**kwargs)

    def drucksache_text(self, **kwargs):
        """Liste aller Volltexte der Drucksachen  # noqa: E501

        Liste aller Volltexte der Drucksachen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.drucksache_text(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            format (str): Format (json or xml). [optional]
            cursor (str): Position des Cursors zur Anfrage weiterer Entit√§ten (s. Folgeanfragen nach weiteren Entit√§ten).. [optional]
            f_id (int): ID der Entit√§t. Kann wiederholt werden, um mehrere Entit√§ten zu selektieren (z.B. f.id=84393&f.id=84394).. [optional]
            f_datum_start (str): Fr√ºhestes Datum der Entit√§t im Format JJJJ-MM-TT. Selektiert Entit√§ten in einem Datumsbereich basierend auf dem Dokumentdatum. F√ºr Vorg√§nge und Personen wird der Datumsbereich aller zugeh√∂rigen Dokumente herangezogen.. [optional]
            f_datum_end (str): Sp√§testes Datum der Entit√§t im Format JJJJ-MM-TT. Selektiert Entit√§ten in einem Datumsbereich basierend auf dem Dokumentdatum. F√ºr Vorg√§nge und Personen wird der Datumsbereich aller zugeh√∂rigen Dokumente herangezogen.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.drucksache_text_endpoint.call_with_http_info(**kwargs)

    def drucksache_text_id(self, id, **kwargs):
        """Volltexte einer Drucksache  # noqa: E501

        Soweit vorhanden werden zus√§tzlich die Volltexte einer Drucksache ausgegeben  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.drucksache_text_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): ID der Drucksache

        Keyword Args:
            format (str): Format. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.drucksache_text_id_endpoint.call_with_http_info(**kwargs)
