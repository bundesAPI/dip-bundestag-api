"""
    Deutscher Bundestag - DIP

    API des Dokumentations- und Informationssystems für Parlamentsmaterialien  # noqa: E501

    The version of the OpenAPI document: 1.2
    Contact: parlamentsdokumentation@bundestag.de
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from deutschland.dip_bundestag.exceptions import ApiAttributeError
from deutschland.dip_bundestag.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    OpenApiModel,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


def lazy_import():
    from deutschland.dip_bundestag.model.aktivitaet_anzeige import AktivitaetAnzeige
    from deutschland.dip_bundestag.model.beschlussfassung import Beschlussfassung
    from deutschland.dip_bundestag.model.fundstelle import Fundstelle
    from deutschland.dip_bundestag.model.ressort import Ressort
    from deutschland.dip_bundestag.model.ueberweisung import Ueberweisung
    from deutschland.dip_bundestag.model.urheber import Urheber
    from deutschland.dip_bundestag.model.vorgangspositionbezug import (
        Vorgangspositionbezug,
    )
    from deutschland.dip_bundestag.model.zuordnung import Zuordnung

    globals()["AktivitaetAnzeige"] = AktivitaetAnzeige
    globals()["Beschlussfassung"] = Beschlussfassung
    globals()["Fundstelle"] = Fundstelle
    globals()["Ressort"] = Ressort
    globals()["Ueberweisung"] = Ueberweisung
    globals()["Urheber"] = Urheber
    globals()["Vorgangspositionbezug"] = Vorgangspositionbezug
    globals()["Zuordnung"] = Zuordnung


class Vorgangsposition(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ("typ",): {
            "VORGANGSPOSITION": "Vorgangsposition",
        },
        ("dokumentart",): {
            "DRUCKSACHE": "Drucksache",
            "PLENARPROTOKOLL": "Plenarprotokoll",
        },
    }

    validations = {
        ("id",): {
            "regex": {
                "pattern": r"^\d+$",  # noqa: E501
            },
        },
        ("vorgang_id",): {
            "regex": {
                "pattern": r"^\d+$",  # noqa: E501
            },
        },
        ("aktivitaet_anzeige",): {
            "max_items": 4,
            "min_items": 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (
            bool,
            date,
            datetime,
            dict,
            float,
            int,
            list,
            str,
            none_type,
        )  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            "id": (str,),  # noqa: E501
            "vorgangsposition": (str,),  # noqa: E501
            "zuordnung": (Zuordnung,),  # noqa: E501
            "gang": (bool,),  # noqa: E501
            "fortsetzung": (bool,),  # noqa: E501
            "nachtrag": (bool,),  # noqa: E501
            "vorgangstyp": (str,),  # noqa: E501
            "typ": (str,),  # noqa: E501
            "titel": (str,),  # noqa: E501
            "dokumentart": (str,),  # noqa: E501
            "vorgang_id": (str,),  # noqa: E501
            "datum": (date,),  # noqa: E501
            "aktualisiert": (datetime,),  # noqa: E501
            "fundstelle": (Fundstelle,),  # noqa: E501
            "aktivitaet_anzahl": (int,),  # noqa: E501
            "urheber": ([Urheber],),  # noqa: E501
            "ueberweisung": ([Ueberweisung],),  # noqa: E501
            "aktivitaet_anzeige": ([AktivitaetAnzeige],),  # noqa: E501
            "ressort": ([Ressort],),  # noqa: E501
            "beschlussfassung": ([Beschlussfassung],),  # noqa: E501
            "ratsdok": (str,),  # noqa: E501
            "kom": (str,),  # noqa: E501
            "sek": (str,),  # noqa: E501
            "mitberaten": ([Vorgangspositionbezug],),  # noqa: E501
            "abstract": (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None

    attribute_map = {
        "id": "id",  # noqa: E501
        "vorgangsposition": "vorgangsposition",  # noqa: E501
        "zuordnung": "zuordnung",  # noqa: E501
        "gang": "gang",  # noqa: E501
        "fortsetzung": "fortsetzung",  # noqa: E501
        "nachtrag": "nachtrag",  # noqa: E501
        "vorgangstyp": "vorgangstyp",  # noqa: E501
        "typ": "typ",  # noqa: E501
        "titel": "titel",  # noqa: E501
        "dokumentart": "dokumentart",  # noqa: E501
        "vorgang_id": "vorgang_id",  # noqa: E501
        "datum": "datum",  # noqa: E501
        "aktualisiert": "aktualisiert",  # noqa: E501
        "fundstelle": "fundstelle",  # noqa: E501
        "aktivitaet_anzahl": "aktivitaet_anzahl",  # noqa: E501
        "urheber": "urheber",  # noqa: E501
        "ueberweisung": "ueberweisung",  # noqa: E501
        "aktivitaet_anzeige": "aktivitaet_anzeige",  # noqa: E501
        "ressort": "ressort",  # noqa: E501
        "beschlussfassung": "beschlussfassung",  # noqa: E501
        "ratsdok": "ratsdok",  # noqa: E501
        "kom": "kom",  # noqa: E501
        "sek": "sek",  # noqa: E501
        "mitberaten": "mitberaten",  # noqa: E501
        "abstract": "abstract",  # noqa: E501
    }

    read_only_vars = {}

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(
        cls,
        id,
        vorgangsposition,
        zuordnung,
        gang,
        fortsetzung,
        nachtrag,
        vorgangstyp,
        titel,
        dokumentart,
        vorgang_id,
        datum,
        aktualisiert,
        fundstelle,
        aktivitaet_anzahl,
        *args,
        **kwargs,
    ):  # noqa: E501
        """Vorgangsposition - a model defined in OpenAPI

        Args:
            id (str):
            vorgangsposition (str):
            zuordnung (Zuordnung):
            gang (bool): Alle Vorgangsschritte, die von besonderer Bedeutung für den Fortgang der Beratung sind, werden durch das Attribut `gang: true` gekennzeichnet.  Ist ein solcher Vorgangsschritt mit einer Drucksache verknüpft, werden im Frontend unter der Benennung \"Wichtige Drucksachen\" Herausgeber, Nummer und Typ sowie das Datum der entsprechenden Drucksachen ausgegeben (z.B. BT-Drs 18/13014 (Beschlussempfehlung), 28.06.2017).  Ist er mit einem Plenarprotokoll verknüpft, werden im Frontend unter der Benennung \"Plenum\" der Klartext der Vorgangsposition, Datum, Herausgeber und Nummer des Plenarprotokolls mit Anfangsseite/Quadrant und Endseite/Quadrant dargestellt (z.B. 2. Beratung: 29.06.2017, BT-PlPr 18/243, S. 24964C - 24973C).
            fortsetzung (bool): Erstreckt sich eine Beratung über mehrere Plenarprotokolle, so müssen entsprechend viele Vorgangsschritte mit je gleicher Vorgangsposition im Vorgangsablauf angelegt werden. Der zweite und jeder weitere dieser Schritte wird dann als \"Fortsetzung\" gekennzeichnet (Attribut `fortsetzung: true`).  Für die Beratung des Gesetzentwurfs für die Feststellung des Haushaltsplanes (Haushaltsberatungen) gelten abweichende Regelungen.
            nachtrag (bool): Eine Auswertungseinheit eines Plenarprotokolls kann nur an genau einen Vorgangsschritt angebunden werden.  Müssen aber mehrere Auswertungseinheiten für einen Vorgangsschritt gebildet werden (weil die Ergänzung einer Rede erst in einem späteren Protokoll erscheint oder weil sich z.B. bei einer Verbundenen Beratung (§ 24 GO-BT) nicht alle Schriftlichen Erklärungen nach § 31 GO-BT auf sämtliche Vorlagen beziehen),  dann müssen im Vorgangsablauf mehrere Vorgangsschritte mit der gleichen Vorgangsposition angelegt werden. Der zweite und jeder weitere dieser Schritte wird dann als \"Nachtrag\" gekennzeichnet (Attribut `nachtrag: true`)
            vorgangstyp (str): Vorgangstyp des zugehörigen Vorgangs
            titel (str): Titel des zugehörigen Vorgangs
            dokumentart (str):
            vorgang_id (str): ID des zugehörigen Vorgangs
            datum (date): Datum des zugehörigen Dokuments
            aktualisiert (datetime): Letzte Aktualisierung der Entität oder des zugehörigen Dokuments
            fundstelle (Fundstelle):
            aktivitaet_anzahl (int): Gesamtzahl der zugehörigen Aktivitäten

        Keyword Args:
            typ (str): defaults to "Vorgangsposition", must be one of ["Vorgangsposition", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            urheber ([Urheber]): [optional]  # noqa: E501
            ueberweisung ([Ueberweisung]): [optional]  # noqa: E501
            aktivitaet_anzeige ([AktivitaetAnzeige]): Zusammenfassung der ersten 4 zur Anzeige vorgesehenen Aktivitäten. [optional]  # noqa: E501
            ressort ([Ressort]): [optional]  # noqa: E501
            beschlussfassung ([Beschlussfassung]): [optional]  # noqa: E501
            ratsdok (str): Ratsdok-Nr.. [optional]  # noqa: E501
            kom (str): KOM-Nr.. [optional]  # noqa: E501
            sek (str): SEK-Nr.. [optional]  # noqa: E501
            mitberaten ([Vorgangspositionbezug]): Es ist eine häufig geübte Praxis, mehrere thematisch verwandte Vorlagen (z.B. konkurrierende Anträge der verschiedenen Fraktionen zum Thema Diesel-Fahrverbote) in einer Debatte gemeinsam zu beraten (\"Zusammenberatung\").  `mitberaten` liefert, von einem Vorgang ausgehend, alle anderen Vorgänge, die Gegenstand der Zusammenberatung sind. . [optional]  # noqa: E501
            abstract (str): [optional]  # noqa: E501
        """

        typ = kwargs.get("typ", "Vorgangsposition")
        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", True)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                        % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.vorgangsposition = vorgangsposition
        self.zuordnung = zuordnung
        self.gang = gang
        self.fortsetzung = fortsetzung
        self.nachtrag = nachtrag
        self.vorgangstyp = vorgangstyp
        self.typ = typ
        self.titel = titel
        self.dokumentart = dokumentart
        self.vorgang_id = vorgang_id
        self.datum = datum
        self.aktualisiert = aktualisiert
        self.fundstelle = fundstelle
        self.aktivitaet_anzahl = aktivitaet_anzahl
        for var_name, var_value in kwargs.items():
            if (
                var_name not in self.attribute_map
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self.additional_properties_type is None
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set(
        [
            "_data_store",
            "_check_type",
            "_spec_property_naming",
            "_path_to_item",
            "_configuration",
            "_visited_composed_classes",
        ]
    )

    @convert_js_args_to_python_args
    def __init__(
        self,
        id,
        vorgangsposition,
        zuordnung,
        gang,
        fortsetzung,
        nachtrag,
        vorgangstyp,
        titel,
        dokumentart,
        vorgang_id,
        datum,
        aktualisiert,
        fundstelle,
        aktivitaet_anzahl,
        *args,
        **kwargs,
    ):  # noqa: E501
        """Vorgangsposition - a model defined in OpenAPI

        Args:
            id (str):
            vorgangsposition (str):
            zuordnung (Zuordnung):
            gang (bool): Alle Vorgangsschritte, die von besonderer Bedeutung für den Fortgang der Beratung sind, werden durch das Attribut `gang: true` gekennzeichnet.  Ist ein solcher Vorgangsschritt mit einer Drucksache verknüpft, werden im Frontend unter der Benennung \"Wichtige Drucksachen\" Herausgeber, Nummer und Typ sowie das Datum der entsprechenden Drucksachen ausgegeben (z.B. BT-Drs 18/13014 (Beschlussempfehlung), 28.06.2017).  Ist er mit einem Plenarprotokoll verknüpft, werden im Frontend unter der Benennung \"Plenum\" der Klartext der Vorgangsposition, Datum, Herausgeber und Nummer des Plenarprotokolls mit Anfangsseite/Quadrant und Endseite/Quadrant dargestellt (z.B. 2. Beratung: 29.06.2017, BT-PlPr 18/243, S. 24964C - 24973C).
            fortsetzung (bool): Erstreckt sich eine Beratung über mehrere Plenarprotokolle, so müssen entsprechend viele Vorgangsschritte mit je gleicher Vorgangsposition im Vorgangsablauf angelegt werden. Der zweite und jeder weitere dieser Schritte wird dann als \"Fortsetzung\" gekennzeichnet (Attribut `fortsetzung: true`).  Für die Beratung des Gesetzentwurfs für die Feststellung des Haushaltsplanes (Haushaltsberatungen) gelten abweichende Regelungen.
            nachtrag (bool): Eine Auswertungseinheit eines Plenarprotokolls kann nur an genau einen Vorgangsschritt angebunden werden.  Müssen aber mehrere Auswertungseinheiten für einen Vorgangsschritt gebildet werden (weil die Ergänzung einer Rede erst in einem späteren Protokoll erscheint oder weil sich z.B. bei einer Verbundenen Beratung (§ 24 GO-BT) nicht alle Schriftlichen Erklärungen nach § 31 GO-BT auf sämtliche Vorlagen beziehen),  dann müssen im Vorgangsablauf mehrere Vorgangsschritte mit der gleichen Vorgangsposition angelegt werden. Der zweite und jeder weitere dieser Schritte wird dann als \"Nachtrag\" gekennzeichnet (Attribut `nachtrag: true`)
            vorgangstyp (str): Vorgangstyp des zugehörigen Vorgangs
            titel (str): Titel des zugehörigen Vorgangs
            dokumentart (str):
            vorgang_id (str): ID des zugehörigen Vorgangs
            datum (date): Datum des zugehörigen Dokuments
            aktualisiert (datetime): Letzte Aktualisierung der Entität oder des zugehörigen Dokuments
            fundstelle (Fundstelle):
            aktivitaet_anzahl (int): Gesamtzahl der zugehörigen Aktivitäten

        Keyword Args:
            typ (str): defaults to "Vorgangsposition", must be one of ["Vorgangsposition", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            urheber ([Urheber]): [optional]  # noqa: E501
            ueberweisung ([Ueberweisung]): [optional]  # noqa: E501
            aktivitaet_anzeige ([AktivitaetAnzeige]): Zusammenfassung der ersten 4 zur Anzeige vorgesehenen Aktivitäten. [optional]  # noqa: E501
            ressort ([Ressort]): [optional]  # noqa: E501
            beschlussfassung ([Beschlussfassung]): [optional]  # noqa: E501
            ratsdok (str): Ratsdok-Nr.. [optional]  # noqa: E501
            kom (str): KOM-Nr.. [optional]  # noqa: E501
            sek (str): SEK-Nr.. [optional]  # noqa: E501
            mitberaten ([Vorgangspositionbezug]): Es ist eine häufig geübte Praxis, mehrere thematisch verwandte Vorlagen (z.B. konkurrierende Anträge der verschiedenen Fraktionen zum Thema Diesel-Fahrverbote) in einer Debatte gemeinsam zu beraten (\"Zusammenberatung\").  `mitberaten` liefert, von einem Vorgang ausgehend, alle anderen Vorgänge, die Gegenstand der Zusammenberatung sind. . [optional]  # noqa: E501
            abstract (str): [optional]  # noqa: E501
        """

        typ = kwargs.get("typ", "Vorgangsposition")
        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                        % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.vorgangsposition = vorgangsposition
        self.zuordnung = zuordnung
        self.gang = gang
        self.fortsetzung = fortsetzung
        self.nachtrag = nachtrag
        self.vorgangstyp = vorgangstyp
        self.typ = typ
        self.titel = titel
        self.dokumentart = dokumentart
        self.vorgang_id = vorgang_id
        self.datum = datum
        self.aktualisiert = aktualisiert
        self.fundstelle = fundstelle
        self.aktivitaet_anzahl = aktivitaet_anzahl
        for var_name, var_value in kwargs.items():
            if (
                var_name not in self.attribute_map
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self.additional_properties_type is None
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(
                    f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                    f"class with read only attributes."
                )
